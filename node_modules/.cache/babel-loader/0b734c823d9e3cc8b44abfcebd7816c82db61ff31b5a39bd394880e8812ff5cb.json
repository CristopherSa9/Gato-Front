{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7ba5bd90\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Tic Tac Toe\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"board\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.board, (row, rowIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: rowIndex,\n      class: \"row\"\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (cell, colIndex) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: colIndex,\n        class: \"cell\",\n        onClick: $event => $options.makeMove(rowIndex, colIndex)\n      }, _toDisplayString(cell), 9 /* TEXT, PROPS */, _hoisted_4);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"p\", null, _toDisplayString($data.message), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.startNewGame && $options.startNewGame(...args))\n  }, \"Nuevo Juego\")])]);\n}","map":{"version":3,"names":["id","_createElementVNode","class","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_Fragment","_renderList","$data","board","row","rowIndex","key","cell","colIndex","onClick","$event","$options","makeMove","_hoisted_4","_hoisted_5","_toDisplayString","message","_cache","args","startNewGame"],"sources":["C:\\Users\\luisk\\Downloads\\tic-tac-toe-api-v2\\frontend\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Tic Tac Toe</h1>\n    <div class=\"board\">\n      <div v-for=\"(row, rowIndex) in board\" :key=\"rowIndex\" class=\"row\">\n        <div\n          v-for=\"(cell, colIndex) in row\"\n          :key=\"colIndex\"\n          class=\"cell\"\n          @click=\"makeMove(rowIndex, colIndex)\"\n        >\n          {{ cell }}\n        </div>\n      </div>\n    </div>\n    <div class=\"message\">\n      <p>{{ message }}</p>\n      <button @click=\"startNewGame\">Nuevo Juego</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      board: [\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"],\n      ],\n      currentPlayer: \"X\",\n      message: \"\",\n      apiBaseUrl: \"http://127.0.0.1:3000\", // Cambia a la URL de tu API\n    };\n  },\n  methods: {\n    makeMove(row, col) {\n      if (this.board[row][col] === \"\" && !this.isGameOver()) {\n        axios\n          .post(`${this.apiBaseUrl}/makeMove`, { row, col })\n          .then((response) => {\n            if (response.data.success) {\n              this.board[row][col] = this.currentPlayer;\n              if (this.checkWinner(row, col)) {\n                this.message = `¡El jugador ${this.currentPlayer} ha ganado!`;\n              } else if (this.isBoardFull()) {\n                this.message = \"¡Es un empate!\";\n              } else {\n                this.currentPlayer = this.currentPlayer === \"X\" ? \"O\" : \"X\";\n              }\n            } else {\n              console.error(response.data.error);\n            }\n          })\n          .catch((error) => {\n            console.error(error);\n            // Agregar manejo de errores adicional según sea necesario\n          });\n      }\n    },\n    checkWinner(row, col) {\n      const player = this.currentPlayer;\n      return (\n        this.checkRow(row, player) ||\n        this.checkColumn(col, player) ||\n        this.checkDiagonals(player)\n      );\n    },\n    checkRow(row, player) {\n      for (let i = 0; i < 3; i++) {\n        if (this.board[row][i] !== player) {\n          return false;\n        }\n      }\n      return true;\n    },\n    checkColumn(col, player) {\n      for (let i = 0; i < 3; i++) {\n        if (this.board[i][col] !== player) {\n          return false;\n        }\n      }\n      return true;\n    },\n    checkDiagonals(player) {\n      return (\n        (this.board[0][0] === player &&\n          this.board[1][1] === player &&\n          this.board[2][2] === player) ||\n        (this.board[0][2] === player &&\n          this.board[1][1] === player &&\n          this.board[2][0] === player)\n      );\n    },\n    isBoardFull() {\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          if (this.board[i][j] === \"\") {\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n    isGameOver() {\n      return this.message !== \"\";\n    },\n    startNewGame() {\n      axios\n        .post(`${this.apiBaseUrl}/resetGame`)\n        .then((response) => {\n          if (response.data.success) {\n            // Reiniciar el juego en el frontend\n            this.board = [\n              [\"\", \"\", \"\"],\n              [\"\", \"\", \"\"],\n              [\"\", \"\", \"\"],\n            ];\n            this.currentPlayer = \"X\";\n            this.message = \"\";\n          } else {\n            console.error(\"Error al reiniciar el juego\");\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n          // Agregar manejo de errores adicional según sea necesario\n        });\n    },\n  },\n};\n</script>\n\n<style scoped>\n#app {\n  text-align: center;\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  margin-top: 30px;\n}\n\n.board {\n  display: inline-block;\n  border: 2px solid #333;\n}\n\n.row {\n  display: flex;\n}\n\n.cell {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2em;\n  cursor: pointer;\n  border: 1px solid #ccc;\n}\n\n.message {\n  margin-top: 20px;\n  font-size: 1.5em;\n}\n\nbutton {\n  font-size: 1em;\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  cursor: pointer;\n  margin-top: 10px;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n  transition: background-color 0.3s ease; /* Agregado para efecto de transición */\n}\n</style>\n"],"mappings":";;;EACOA,EAAE,EAAC;AAAK;gEACXC,mBAAA,CAAoB,YAAhB,aAAW;;EACVC,KAAK,EAAC;AAAO;;;EAYbA,KAAK,EAAC;AAAS;;uBAdtBC,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJC,UAAoB,EACpBJ,mBAAA,CAWM,OAXNK,UAWM,I,kBAVJH,mBAAA,CASMI,SAAA,QAAAC,WAAA,CATyBC,KAAA,CAAAC,KAAK,GAAvBC,GAAG,EAAEC,QAAQ;yBAA1BT,mBAAA,CASM;MATiCU,GAAG,EAAED,QAAQ;MAAEV,KAAK,EAAC;2BAC1DC,mBAAA,CAOMI,SAAA,QAAAC,WAAA,CANuBG,GAAG,GAAtBG,IAAI,EAAEC,QAAQ;2BADxBZ,mBAAA,CAOM;QALHU,GAAG,EAAEE,QAAQ;QACdb,KAAK,EAAC,MAAM;QACXc,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,QAAQ,CAACP,QAAQ,EAAEG,QAAQ;0BAEhCD,IAAI,wBAAAM,UAAA;;oCAIbnB,mBAAA,CAGM,OAHNoB,UAGM,GAFJpB,mBAAA,CAAoB,WAAAqB,gBAAA,CAAdb,KAAA,CAAAc,OAAO,kBACbtB,mBAAA,CAAkD;IAAzCe,OAAK,EAAAQ,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEP,QAAA,CAAAQ,YAAA,IAAAR,QAAA,CAAAQ,YAAA,IAAAD,IAAA,CAAY;KAAE,aAAW,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}