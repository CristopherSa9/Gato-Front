{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7ba5bd90\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Tic Tac Toe\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"board\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.board, (row, rowIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: rowIndex,\n      class: \"row\"\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (cell, colIndex) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: colIndex,\n        class: \"cell\",\n        onClick: $event => $options.makeMove(rowIndex, colIndex)\n      }, _toDisplayString(cell), 9 /* TEXT, PROPS */, _hoisted_4);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"p\", {\n    class: _normalizeClass({\n      'alert': $data.message !== ''\n    })\n  }, _toDisplayString($data.message), 3 /* TEXT, CLASS */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.startGame && $options.startGame(...args))\n  }, \"Nuevo Juego\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.restartGame && $options.restartGame(...args))\n  }, \"Reiniciar Juego\")])]);\n}","map":{"version":3,"names":["id","_createElementVNode","class","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_Fragment","_renderList","$data","board","row","rowIndex","key","cell","colIndex","onClick","$event","$options","makeMove","_hoisted_4","_hoisted_5","_normalizeClass","message","_cache","args","startGame","restartGame"],"sources":["C:\\Users\\luisk\\Downloads\\Gato-Front\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <h1>Tic Tac Toe</h1>\r\n    <div class=\"board\">\r\n      <div v-for=\"(row, rowIndex) in board\" :key=\"rowIndex\" class=\"row\">\r\n        <div\r\n          v-for=\"(cell, colIndex) in row\"\r\n          :key=\"colIndex\"\r\n          class=\"cell\"\r\n          @click=\"makeMove(rowIndex, colIndex)\"\r\n        >\r\n          {{ cell }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"message\">\r\n      <p :class=\"{ 'alert': message !== '' }\">{{ message }}</p>\r\n      <button @click=\"startGame\">Nuevo Juego</button>\r\n      <button @click=\"restartGame\">Reiniciar Juego</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      board: [\r\n        [\"\", \"\", \"\"],\r\n        [\"\", \"\", \"\"],\r\n        [\"\", \"\", \"\"],\r\n      ],\r\n      ID_Game: null,\r\n      Player: null,\r\n      message: \"\",\r\n      apiBaseUrl: \"https://46i3aj7hn3.execute-api.us-east-1.amazonaws.com\", // Cambia a la URL de tu API\r\n    };\r\n  },\r\n  methods: {\r\n    makeMove(rowIndex, colIndex) {\r\n      if (this.ID_Game != null) {\r\n        if (this.board[rowIndex][colIndex] === \"\") {\r\n          axios\r\n            .get(`${this.apiBaseUrl}/game/${this.ID_Game}`)\r\n            .then((response) => {\r\n              console.log(response.data[\"Game\"]);\r\n            });\r\n\r\n          const move = {\r\n            row: rowIndex.toString(),\r\n            col: colIndex.toString(),\r\n            player: this.Player, // Enviar el jugador actual con la solicitud\r\n          };\r\n\r\n          axios\r\n            .put(`${this.apiBaseUrl}/makeMove/${this.ID_Game}`, move)\r\n            .then((response) => {\r\n              console.log(response.data);\r\n              if (response.data[\"Valido\"] === \"Movimiento valido.\") {\r\n                this.board[rowIndex][colIndex] = this.Player;\r\n\r\n                if (this.checkWinner(this.Player)) {\r\n                  this.message = `¡El jugador ${this.Player} ha ganado!`;\r\n                } else if (this.checkDraw()) {\r\n                  this.message = \"¡Es un empate!\";\r\n                } else {\r\n                  this.Player = this.Player === \"X\" ? \"O\" : \"X\"; // Cambiar al siguiente jugador\r\n                }\r\n              }\r\n            });\r\n        } else {\r\n          alert(\"La celda ya está ocupada\");\r\n        }\r\n      } else {\r\n        alert(\"Inicia un juego primero\");\r\n      }\r\n    },\r\n\r\n    checkWinner(player) {\r\n  const winPatterns = [\r\n    // Filas\r\n    [[0, 0], [0, 1], [0, 2]],\r\n    [[1, 0], [1, 1], [1, 2]],\r\n    [[2, 0], [2, 1], [2, 2]],\r\n    // Columnas\r\n    [[0, 0], [1, 0], [2, 0]],\r\n    [[0, 1], [1, 1], [2, 1]],\r\n    [[0, 2], [1, 2], [2, 2]],\r\n    // Diagonales\r\n    [[0, 0], [1, 1], [2, 2]],\r\n    [[0, 2], [1, 1], [2, 0]],\r\n  ];\r\n\r\n  for (const pattern of winPatterns) {\r\n    const [a, b, c] = pattern;\r\n    if (\r\n      this.board[a[0]][a[1]] === player &&\r\n      this.board[b[0]][b[1]] === player &&\r\n      this.board[c[0]][c[1]] === player\r\n    ) {\r\n      return true; // Jugador actual ha ganado\r\n    }\r\n  }\r\n\r\n  return false; // Nadie ha ganado todavía\r\n},\r\n\r\n    checkDraw() {\r\n      for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n          if (this.board[i][j] === \"\") {\r\n            return false; // Todavía hay celdas vacías, no es un empate\r\n          }\r\n        }\r\n      }\r\n      return true; // Todas las celdas están ocupadas, es un empate\r\n    },\r\n\r\n    startGame() {\r\n      axios\r\n        .get(`${this.apiBaseUrl}/get-id`)\r\n        .then((response) => {\r\n          this.ID_Game = response.data[\"New Game\"];\r\n          this.Player = \"X\"; // Inicializar el jugador actual como \"X\"\r\n        })\r\n        .then(() => {\r\n          axios\r\n            .put(`${this.apiBaseUrl}/game/${this.ID_Game}`)\r\n            .then((response) => {\r\n              console.log(response.data);\r\n              alert(`Juego iniciado.`);\r\n            });\r\n        });\r\n    },\r\n\r\n    restartGame() {\r\n      axios\r\n        .put(`${this.apiBaseUrl}/resetGame/${this.ID_Game}`)\r\n        .then((response) => {\r\n          if (response.data[\"Valido\"] == \"Juego reiniciado\") {\r\n            this.message = '';\r\n            this.board = [\r\n              [\"\", \"\", \"\"],\r\n              [\"\", \"\", \"\"],\r\n              [\"\", \"\", \"\"],\r\n            ];\r\n            alert (\"Juego reiniciado\");\r\n          }\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#app {\r\n  background-color: linear-gradient (135deg, #8052ec, #d161ff, yellowgreen);\r\n  text-align: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.board {\r\n  display: inline-block;\r\n  border: 2px solid #333;\r\n  background-color: white;\r\n}\r\n\r\n.row {\r\n  display: flex;\r\n}\r\n\r\n.cell {\r\n  width: 100px;\r\n  height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 2em;\r\n  cursor: pointer;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\n.message {\r\n  margin-top: 20px;\r\n  font-size: 1.5em;\r\n}\r\n\r\nbutton {\r\n  font-size: 1em;\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n  margin-left: 10px;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n</style>\r\n"],"mappings":";;;EACOA,EAAE,EAAC;AAAK;gEACXC,mBAAA,CAAoB,YAAhB,aAAW;;EACVC,KAAK,EAAC;AAAO;;;EAYbA,KAAK,EAAC;AAAS;;uBAdtBC,mBAAA,CAmBM,OAnBNC,UAmBM,GAlBJC,UAAoB,EACpBJ,mBAAA,CAWM,OAXNK,UAWM,I,kBAVJH,mBAAA,CASMI,SAAA,QAAAC,WAAA,CATyBC,KAAA,CAAAC,KAAK,GAAvBC,GAAG,EAAEC,QAAQ;yBAA1BT,mBAAA,CASM;MATiCU,GAAG,EAAED,QAAQ;MAAEV,KAAK,EAAC;2BAC1DC,mBAAA,CAOMI,SAAA,QAAAC,WAAA,CANuBG,GAAG,GAAtBG,IAAI,EAAEC,QAAQ;2BADxBZ,mBAAA,CAOM;QALHU,GAAG,EAAEE,QAAQ;QACdb,KAAK,EAAC,MAAM;QACXc,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,QAAQ,CAACP,QAAQ,EAAEG,QAAQ;0BAEhCD,IAAI,wBAAAM,UAAA;;oCAIbnB,mBAAA,CAIM,OAJNoB,UAIM,GAHJpB,mBAAA,CAAyD;IAArDC,KAAK,EAAAoB,eAAA;MAAA,SAAab,KAAA,CAAAc,OAAO;IAAA;sBAAcd,KAAA,CAAAc,OAAO,yBAClDtB,mBAAA,CAA+C;IAAtCe,OAAK,EAAAQ,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEP,QAAA,CAAAQ,SAAA,IAAAR,QAAA,CAAAQ,SAAA,IAAAD,IAAA,CAAS;KAAE,aAAW,GACtCxB,mBAAA,CAAqD;IAA5Ce,OAAK,EAAAQ,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEP,QAAA,CAAAS,WAAA,IAAAT,QAAA,CAAAS,WAAA,IAAAF,IAAA,CAAW;KAAE,iBAAe,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}